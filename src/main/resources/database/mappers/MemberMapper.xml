<?xml version="1.0" encoding="UTF-8"?>
<!-- Schema 추가 -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.acadmi.member.MemberDAO">
  
  		<!-- ==================================Member================================ -->
  
  		<select id="getLogin" parameterType="MemberVO" resultMap="loginResult">
  			SELECT *
  			FROM MEMBER M
  				INNER JOIN
  				MEMBER_ROLE MR
  				ON M.USERNAME = MR.USERNAME
  				INNER JOIN
  				ROLE R
  				ON MR.ROLENUM = R.ROLENUM
  			WHERE M.USERNAME = #{username}
  		</select>
  		
  		<resultMap type="MemberVO" id="loginResult">
  			<id property="username" column="USERNAME"/>
  			<result property="password" column="PASSWORD"/>
  			<result property="category" column="CATEGORY"/>
  			<result property="enabled" column="ENABLED"/>
  			<collection property="roleVOs" javaType="List" ofType="RoleVO">
  				<id property="roleNum" column="ROLENUM"/>
  				<result property="roleName" column="ROLENAME"/>
  			</collection>
  		</resultMap>
  		
  		<select id="getFindPw" parameterType="MemberVO" resultType="MemberVO">
	  		SELECT EMAIL FROM MEMBER
	  		WHERE USERNAME = #{username} AND EMAIL = #{email}
  		</select>
  		
  		<update id="setPwUpdate" parameterType="MemberVO">
  			UPDATE MEMBER SET PASSWORD = #{password} WHERE USERNAME = #{username}
  		</update>
  		
  		<select id="getFirstEmail" parameterType="MemberVO" resultType="MemberVO">
	  		SELECT EMAIL FROM MEMBER
	  		WHERE EMAIL = #{email} AND ENABLED = 0
  		</select>
  		
  		<update id="setEnabledUpdate" parameterType="MemberVO">
  			UPDATE MEMBER SET ENABLED = 1 WHERE ENABLED = 0
  		</update>
 
 <!-- ============================================================================================================================ -->
  		
  		
  		<select id="getStudent" parameterType="StudentVO" resultMap="studentResult">
	  		SELECT * FROM MEMBER M
				LEFT OUTER JOIN
					MEMBERFILES MF
				USING(USERNAME)
					INNER JOIN
						STUDENT S 
					USING(USERNAME)
						INNER JOIN
							DEPARTMENT D 
						USING(DEPTNUM)
		 	WHERE M.USERNAME = #{username}
  		</select>
  	
  		<resultMap type="DepartmentVO" id="studentResult">
  			<id column="DEPTNUM" property="deptNum"/>
  			<result column="DEPTNAME" property="deptName"/>
  			<collection property="studentVOs" javaType="List" ofType="StudentVO">
  				<id column="USERNAME" property="username"/>
  				<result column="GRADE" property="grade"/>
  				<result column="NAME" property="name"/>
  				<result column="PHONE" property="phone"/>
  				<result property="birth" column="BIRTH"/>
	  			<result property="address" column="ADDRESS"/>
	  			<result property="addressDetail" column="ADDRESSDETAIL"/>
	  			<result property="email" column="EMAIL"/>
  				<association property="memberFilesVO" javaType="MemberFilesVO">
           			<id column="FILENUM" property="fileNum"/>
           			<result property="fileName" column="FILENAME"/>
           			<result property="oriName" column="ORINAME"/>
        		</association>
  			</collection>
  		</resultMap>
  		
  		<select id="getProfessor" parameterType="ProfessorVO" resultMap="professorResult">
	  		SELECT * FROM MEMBER M
				LEFT OUTER JOIN
					MEMBERFILES MF
				USING(USERNAME)
					INNER JOIN
						PROFESSOR P 
					USING(USERNAME)
						INNER JOIN
							DEPARTMENT D 
						USING(DEPTNUM)
		 	WHERE M.USERNAME = #{username}
  		</select>
  	
  		<resultMap type="DepartmentVO" id="professorResult">
  			<id column="DEPTNUM" property="deptNum"/>
  			<result column="DEPTNAME" property="deptName"/>
  			<collection property="professorVOs" javaType="List" ofType="ProfessorVO">
  				<id column="USERNAME" property="username"/>
  				<result column="NAME" property="name"/>
	  			<result column="PROFESSORROOM" property="professorRoom"/>
  				<result column="PHONE" property="phone"/>
  				<result property="birth" column="BIRTH"/>
	  			<result property="address" column="ADDRESS"/>
	  			<result property="addressDetail" column="ADDRESSDETAIL"/>
	  			<result property="email" column="EMAIL"/>
  				<result column="STATUS" property="status"/>
  				<association property="memberFilesVO" javaType="MemberFilesVO">
           			<id column="FILENUM" property="fileNum"/>
           			<result property="fileName" column="FILENAME"/>
        		</association>
  			</collection>
  		</resultMap>
  		
  		<select id="getAdministrator" parameterType="AdministratorVO" resultMap="administratorResult">
		 	SELECT * FROM MEMBER M
				LEFT OUTER JOIN
					MEMBERFILES MF
				USING(USERNAME)
					INNER JOIN
						ADMINISTRATOR A 
					USING(USERNAME)
						INNER JOIN
							DEPARTMENT D 
						USING(DEPTNUM)
		 	WHERE M.USERNAME = #{username}
  		</select>
  		
  		<resultMap type="DepartmentVO" id="administratorResult">
  			<id column="DEPTNUM" property="deptNum"/>
  			<result column="DEPTNAME" property="deptName"/>
  			<collection property="administratorVOs" javaType="List" ofType="AdministratorVO">
  				<id column="USERNAME" property="username"/>
  				<result column="NAME" property="name"/>
  				<result column="PHONE" property="phone"/>
  				<result property="birth" column="BIRTH"/>
	  			<result property="address" column="ADDRESS"/>
	  			<result property="addressDetail" column="ADDRESSDETAIL"/>
	  			<result property="email" column="EMAIL"/>
  				<result column="STATUS" property="status"/>
  				<association property="memberFilesVO" javaType="MemberFilesVO">
           			<id column="FILENUM" property="fileNum"/>
           			<result property="fileName" column="FILENAME"/>
        		</association>
  			</collection>
  		</resultMap>
  		
	
 <!-- ============================================================================================================================ -->
 
 		<update id="setStudentUpdate" parameterType="MemberVO">
 			UPDATE MEMBER M
 				LEFT JOIN STUDENT S ON (M.USERNAME  = S.USERNAME)
				   SET 
				   	   S.PHONE = #{phone},
				   	   S.ADDRESS = #{address},
				   	   S.ADDRESSDETAIL = #{addressDetail},
				   	   M.EMAIL = #{email}
 			WHERE M.USERNAME = #{username}
 		</update>
 		
 		<update id="setProfessorUpdate" parameterType="MemberVO">
 			UPDATE MEMBER M
 				LEFT JOIN PROFESSOR P ON (M.USERNAME  = P.USERNAME)
				   SET 
				   	   P.PHONE = #{phone},
				   	   P.ADDRESS = #{address},
				   	   P.ADDRESSDETAIL = #{addressDetail},
				   	   M.EMAIL = #{email}
 			WHERE M.USERNAME = #{username}
 		</update>
 		
 		<update id="setAdministratorUpdate" parameterType="MemberVO">
 			UPDATE MEMBER M
 				LEFT JOIN ADMINISTRATOR A ON (M.USERNAME  = A.USERNAME)
				   SET 
				   	   A.PHONE = #{phone},
				   	   A.ADDRESS = #{address},
				   	   A.ADDRESSDETAIL = #{addressDetail},
				   	   M.EMAIL = #{email}
 			WHERE M.USERNAME = #{username}
 		</update>
 		
 		<select id="getFileDetail" parameterType="MemberFilesVO" resultType="MemberFilesVO">
 			SELECT FILENAME, ORINAME FROM MEMBERFILES WHERE USERNAME = #{username}
 		</select>
 		
 		<insert id="setFileAdd" parameterType="MemberFilesVO">
 			INSERT INTO MEMBERFILES(USERNAME, FILENAME, ORINAME)
 			VALUES(#{username}, #{fileName}, #{oriName})
 		</insert>
 		
 		<delete id="setFileDelete" parameterType="MemberFilesVO">
 			DELETE FROM MEMBERFILES WHERE FILENUM = #{fileNum}
 		</delete>
 		
 		<update id="setFileUpdate" parameterType="MemberFilesVO">
 			UPDATE MEMBERFILES SET FILENAME = #{fileName}, ORINAME = #{oriName}
 			WHERE USERNAME = #{username}
 		</update>
 		
  </mapper>