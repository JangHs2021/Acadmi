<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.acadmi.student.lecture.StudentLectureDAO">
	<!-- SQL -->
	<sql id="search">
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="search != null and !search.equals('')">
				AND LECTURENAME LIKE CONCAT('%', #{search}, '%')
			</if>
			<if test="category != null and !category.equals('')">
				AND CATEGORY = #{category}
			</if>
			<if test="grade != null and !grade.equals('')">
				AND GRADE = #{grade}
			</if>
 			<if test="department != null and !department.equals('')">
				AND DEPTNUM = #{deptNum}
			</if>
			AND LECTURENUM NOT IN (SELECT LECTURENUM FROM STUDENT_LECTURE WHERE USERNAME = #{username})
		</trim>
	</sql>	

	<!-- ResultMap -->
	<resultMap type="LectureVO" id="allLectureList">
		<id column="LECTURENUM" property="lectureNum"/>
		<result column="LECTURENAME" property="lectureName"/>
		<result column="CATEGORY" property="category"/>
		<result column="GRADE" property="grade"/>
		<result column="SUBSCRIPTION" property="subscription"/>
		<result column="PERSONAL" property="personal"/>
		<result column="WEEKDAY" property="weekday"/>
		<result column="STARTTIME" property="startTime"/>
		<result column="ENDTIME" property="endTime"/>
		<result column="COMPLETIONGRADE" property="completionGrade"/>
		<result column="STATUS" property="status"/>
		<result column="NOTE" property="note"/>
		<result column="TEMPORARY" property="temporary"/>
		<result column="FAVORITE" property="favorite"/>
		<association property="professorVO" javaType="ProfessorVO">
			<id column="USERNAME" property="username"/>
			<result column="NAME" property="name"/>
			<result column="PROFESSORROOM" property="professorRoom"/>
			<result column="PHONE" property="phone"/>
			<result column="BIRTH" property="birth"/>
			<result column="ADDRESS" property="address"/>
			<result column="STATUS" property="status"/>
		</association>
		<association property="periodVO" javaType="PeriodVO">
			<id column="YEAR" property="year"/>
			<id column="SEMESTER" property="semester"/>
			<result column="APPLICATIONSTART" property="applicationStart"/>
			<result column="APPLICATIONEND" property="applicationEnd"/>
			<result column="FAVORITESTART" property="favoriteStart"/>
			<result column="FAVORITEEND" property="favoriteEnd"/>
			<result column="DEADLINE" property="deadline"/>
		</association>
		<association property="lectureRoomVO" javaType="LectureRoomVO">
			<id column="LECTUREBUILDING" property="lectureBuilding"/>
			<id column="LECTUREROOM" property="lectureRoom"/>
			<result column="PERSONAL" property="personal"/>
			<result column="STATUS" property="status"/>
		</association>
		<association property="departmentVO" javaType="DepartmentVO">
			<id column="DEPTNUM" property="deptNum"/>
			<result column="COLLEGENUM" property="collegeNum"/>
			<result column="DEPTNAME" property="deptName"/>
			<result column="STATUS" property="status"/>
		</association>
		<association property="favoriteLectureVO" javaType="FavoriteLectureVO">
			<id column="FAVORITENUM" property="favoriteNum"/>
		</association>
		<association property="studentVO" javaType="StudentVO">
			<id column="USERNAME" property="username"/>
			<result column="DEPTNUM" property="deptNum"/>
			<result column="GRADE" property="grade"/>
			<result column="NAME" property="name"/>
			<result column="PHONE" property="phone"/>
			<result column="BIRTH" property="birth"/>
			<result column="ADDRESS" property="address"/>
			<result column="STATUS" property="status"/>
		</association>
	</resultMap>

	<!-- SELECT -->
	<select id="getAllLectureList" parameterType="Pagination" resultMap="allLectureList">
		SELECT L.*, D.DEPTNAME
		FROM LECTURE L
			LEFT OUTER JOIN
			PROFESSOR PR
			ON PR.USERNAME = L.USERNAME
				INNER JOIN
				PERIOD PE
				ON PE.SEMESTER = L.SEMESTER AND PE.YEAR = L.YEAR
					INNER JOIN
					LECTURE_ROOM LR
					ON LR.LECTUREBUILDING = L.LECTUREBUILDING AND LR.LECTUREROOM = L.LECTUREROOM		
						INNER JOIN
						DEPARTMENT D
						ON D.DEPTNUM = L.DEPTNUM
		<include refid="search"></include>
		ORDER BY LECTURENUM DESC
		LIMIT #{startRow}, #{perPage}
	</select>
	
	<select id="getMyLectureList" parameterType="StudentLectureVO" resultMap="allLectureList">
		SELECT L.*, D.DEPTNAME
		FROM STUDENT_LECTURE SL
			LEFT OUTER JOIN
			LECTURE L
			USING (LECTURENUM)
				INNER JOIN
				DEPARTMENT D
				ON D.DEPTNUM = L.DEPTNUM
					INNER JOIN
					STUDENT S
					ON S.USERNAME = SL.USERNAME
		WHERE S.USERNAME = #{username} AND ENABLED = 1
		ORDER BY LECTURENUM DESC
	</select>
	
	<select id="getMyFavoriteList" parameterType="FavoriteLectureVO" resultMap="allLectureList">
		SELECT FL.FAVORITENUM, L.*, D.DEPTNAME
		FROM FAVORITE_LECTURE FL
			LEFT OUTER JOIN
			LECTURE L
			ON L.LECTURENUM = FL.LECTURENUM
				INNER JOIN
				DEPARTMENT D
				ON D.DEPTNUM = L.DEPTNUM
					INNER JOIN
					STUDENT S
					ON S.USERNAME = FL.USERNAME
		WHERE FL.LECTURENUM NOT IN (SELECT LECTURENUM FROM STUDENT_LECTURE WHERE USERNAME = #{username})
		ORDER BY FAVORITENUM DESC
	</select>
	
	<select id="getAllLectureCount" parameterType="Pagination" resultType="Long">
		SELECT COUNT(LECTURENUM)
		FROM LECTURE
		<include refid="search"></include>
	</select>
	
	<select id="getMyLectureCount" parameterType="Pagination" resultType="Long">
		SELECT COUNT(LECTURENUM)
		FROM STUDENT_LECTURE
		<include refid="search"></include>
	</select>
	
	<select id="getMyFavoriteCount" parameterType="Pagination" resultType="Long">
		SELECT COUNT(FAVORITENUM)
		FROM FAVORITE_LECTURE
		<include refid="search"></include>
	</select>
	
	<select id="getMyLecture" parameterType="StudentLectureVO" resultType="StudentLectureVO">
		SELECT *
		FROM STUDENT_LECTURE
		WHERE USERNAME = #{username}
		AND LECTURENUM = #{lectureNum}
	</select>
	
	<select id="getMyFavorite" parameterType="FavoriteLectureVO" resultType="FavoriteLectureVO">
		SELECT *
		FROM FAVORITE_LECTURE
		WHERE FAVORITENUM = #{favoriteNum}
	</select>
	
	<select id="getGradeCount" parameterType="StudentLectureVO" resultType="Long">
		SELECT COALESCE(SUM(L.COMPLETIONGRADE), 0)
		FROM LECTURE L
			INNER JOIN
			STUDENT_LECTURE SL
			ON SL.LECTURENUM = L.LECTURENUM
		WHERE SL.USERNAME = #{username}
		AND SL.LECTURENUM != #{lectureNum}
	</select>
	
	<select id="getDuplicateTime" parameterType="LectureVO" resultMap="allLectureList">
		<![CDATA[
		SELECT *
		FROM LECTURE L
			LEFT OUTER JOIN 
			STUDENT_LECTURE SL
			ON (SL.LECTURENUM = L.LECTURENUM)
		WHERE SL.USERNAME = #{username}
		AND (WEEKDAY = #{weekday} AND (STARTTIME <= #{startTime} AND ENDTIME >= #{startTime})
			OR (STARTTIME <= #{endTime} AND ENDTIME >= #{endTime}))]]>
	</select>
	
	<!-- INSERT -->
	<insert id="insertToStudentLecture" parameterType="StudentLectureVO">
		INSERT INTO STUDENT_LECTURE (LECTURENUM, USERNAME, ENABLED)
		VALUES (#{lectureNum}, #{username}, 1)
	</insert>
	
	<insert id="insertToFavoriteLecture" parameterType="FavoriteLectureVO" useGeneratedKeys="true" keyProperty="favoriteNum">
		INSERT INTO FAVORITE_LECTURE (FAVORITENUM, LECTURENUM, USERNAME)
		VALUES (#{favoriteNum}, #{lectureNum}, #{username})
	</insert>
	
	<!-- UPDATE -->
	<update id="addToSubscription" parameterType="LectureVO">
		UPDATE LECTURE
		SET SUBSCRIPTION = SUBSCRIPTION + 1
		WHERE LECTURENUM = #{lectureNum}
	</update>
	
	<update id="deleteToSubscription" parameterType="LectureVO">
		UPDATE LECTURE
		SET SUBSCRIPTION = SUBSCRIPTION - 1
		WHERE LECTURENUM = #{lectureNum}
	</update>
	
	<update id="addToFavorite" parameterType="LectureVO">
		UPDATE LECTURE
		SET FAVORITE = 1
		WHERE LECTURENUM = #{lectureNum}
	</update>
	
	<update id="deleteToFavorite" parameterType="LectureVO">
		UPDATE LECTURE
		SET FAVORITE = 0
		WHERE LECTURENUM = #{lectureNum}
	</update>
	
	<!-- DELETE -->
	<delete id="deleteToStudentLecture" parameterType="StudentLectureVO">
		DELETE
		FROM STUDENT_LECTURE
		WHERE USERNAME = #{username}
		AND LECTURENUM = #{lectureNum}
	</delete>
	
	<delete id="deleteToFavoriteLecture" parameterType="FavoriteLectureVO">
		DELETE
		FROM FAVORITE_LECTURE
		WHERE FAVORITENUM = #{favoriteNum}
	</delete>
	
</mapper>